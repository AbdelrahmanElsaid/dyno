#!/usr/bin/env python
#
# License: BSD
#   https://raw.githubusercontent.com/samiamlabs/dyno/master/LICENCE
#

import rospy

import os

from std_srvs.srv import *

from dyno_msgs.srv import *
from dyno_msgs.msg import *

from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import PoseWithCovarianceStamped, PoseStamped, Quaternion, Pose, Point

from tf.transformations import quaternion_from_euler, euler_from_quaternion

import tf_conversions.posemath as pm
import numpy as np

import rospkg
import yaml

from copy import deepcopy


class LocalWorldState:
    def __init__(self):
        self.master_name = rospy.get_param("/rocon/master/name", "dyno")
        self.robot_base_type = os.getenv('DYNO_BASE', 'forklift')

        self.last_pose = PoseStamped()
        self.current_pose = PoseStamped()

        self.locations_dict = {}
        self.objects_dict = {}
        self.robot_dict = {}
        self.moving_object_name = None

        self.robots_at_locations = []
        self.objects_at_locations = []
        self.objects_on_robots = []

        self.unique_id_counter = 1000

        rospack = rospkg.RosPack()
        self.save_state_filename = rospack.get_path(
            'dyno_world_state') + '/states/save_state.yaml'

        self.save_objects_filename = rospack.get_path(
            'dyno_world_state') + '/states/save_objects.yaml'

        self.init_publishers()
        self.init_subscribers()
        self.init_services()

        self.handle_load_state(None)
        self.handle_load_objects(None)
        self.update_predicates()

    def init_services(self):
        self.clear_all_service = rospy.Service(
            '/world_state/clear_all', Empty, self.handle_clear_all)

        # Locations
        self.add_current_pose_service = rospy.Service(
            '/world_state/add_current_location', AddCurrentLocation, self.handle_add_current_pose)

        self.clear_locations_service = rospy.Service(
            '/world_state/clear_locations', Empty, self.handle_clear_locations)

        self.save_state_service = rospy.Service(
            '/world_state/save', Empty, self.handle_save_state)

        self.load_state_service = rospy.Service(
            '/world_state/load', Empty, self.handle_load_state)

        self.get_locations_service = rospy.Service(
            '/world_state/get_locations', GetLocations, self.handle_get_locations)

        self.set_locations_service = rospy.Service(
            '/world_state/set_locations', SetLocations, self.handle_set_locations)

        # Objects
        self.load_state_service = rospy.Service(
            '/world_state/get_unity_objects', Empty, self.handle_get_unity_objects)

        self.add_current_pose_service = rospy.Service(
            '/world_state/clear_objects', Empty, self.handle_clear_objects)

        self.save_state_service = rospy.Service(
            '/world_state/save_objects', Empty, self.handle_save_objects)

        self.load_state_service = rospy.Service(
            '/world_state/load_objects', Empty, self.handle_load_objects)

        self.get_objects_service = rospy.Service(
            '/world_state/get_objects', GetObjects, self.handle_get_objects)

        self.set_objects_service = rospy.Service(
            '/world_state/set_objects', SetObjects, self.handle_set_objects)

        # Robots
        self.clear_robots_service = rospy.Service(
            '/world_state/clear_robots', Empty, self.handle_clear_robots)

        self.get_robots_service = rospy.Service(
            '/world_state/get_robots', GetRobots, self.handle_get_robots)

        self.set_robots_service = rospy.Service(
            '/world_state/set_robots', SetRobots, self.handle_set_robots)

        # Predicates
        self.get_robots_at_locations = rospy.Service(
            '/world_state/get_robots_at_locations', GetRobotsAtLocations, self.handle_get_robots_at_locations)

        self.get_objects_at_locations = rospy.Service(
            '/world_state/get_objects_at_locations', GetObjectsAtLocations, self.handle_get_objects_at_locations)

        self.clear_objects_on_robots_service = rospy.Service(
            '/world_state/clear_objects_on_robots', Empty, self.handle_clear_objects_on_robots)

        self.add_object_on_robot = rospy.Service(
            '/world_state/add_object_on_robot', AddObjectOnRobot, self.handle_add_object_on_robot)

        self.remove_object_on_robot = rospy.Service(
            '/world_state/remove_object_on_robot', RemoveObjectOnRobot, self.handle_remove_object_on_robot)

        self.get_objects_on_robots = rospy.Service(
            '/world_state/get_objects_on_robots', GetObjectsOnRobots, self.handle_get_objects_on_robots)

    def handle_get_robots_at_locations(self, request):
        self.update_robots_at_locations()
        response = GetRobotsAtLocationsResponse()
        response.robots_at_locations = self.robots_at_locations
        return response

    def handle_get_objects_at_locations(self, request):
        self.update_predicates()
        response = GetObjectsAtLocationsResponse()
        response.objects_at_locations = self.objects_at_locations
        return response

    def update_robots_at_locations(self):
        in_location_cutoff_distance = 0.2

        response = GetRobotsAtLocationsResponse()

        for key, robot in self.robot_dict.items():
            robot_position = robot.pose.position
            robot_point_2d = np.array([robot_position.x, robot_position.y])
            for key, location in self.locations_dict.items():
                location_position = location.pose.position
                location_point_2d = np.array(
                    [location_position.x, location_position.y])
                distance_to_location = np.linalg.norm(
                    robot_point_2d - location_point_2d)
                if distance_to_location < in_location_cutoff_distance:
                    robot_in_location = RobotAtLocation()
                    robot_in_location.robot_name = robot.name
                    robot_in_location.location_name = key
                    response.robots_at_locations.append(robot_in_location)

        changed = False
        if len(self.robots_at_locations) == len(response.robots_at_locations):
            for last, current in zip(self.robots_at_locations, response.robots_at_locations):
                if last.robot_name != current.robot_name or last.location_name != current.location_name:
                    changed = True
                    break
        else:
            changed = True

        if changed:
            self.publish_event('robots_at_locations')

        self.robots_at_locations = response.robots_at_locations

    def update_objects_at_locations(self):
        in_location_cutoff_distance = 0.2

        response = GetObjectsAtLocationsResponse()
        for location_name, location in self.locations_dict.items():
            location_position = location.pose.position
            location_point_2d = np.array(
                [location_position.x, location_position.y])
            for object_name, object in self.objects_dict.items():
                object_position = object.pose.position
                object_point_2d = np.array(
                    [object_position.x, object_position.y])
                distance_to_object = np.linalg.norm(
                    location_point_2d - object_point_2d)
                if distance_to_object < in_location_cutoff_distance:
                    object_at_location = ObjectAtLocation(
                        object_name=object_name, location_name=location_name)
                    response.objects_at_locations.append(object_at_location)

        changed = False
        if len(self.objects_at_locations) == len(response.objects_at_locations):
            for last, current in zip(self.objects_at_locations, response.objects_at_locations):
                if last.object_name != current.object_name or last.location_name != current.location_name:
                    changed = True
                    break
        else:
            changed = True

        if changed:
            self.publish_event('objects_at_locations')

        self.objects_at_locations = response.objects_at_locations

    # Locations
    def handle_get_locations(self, request):
        response = GetLocationsResponse()
        response.locations = self.create_location_array().locations
        return response

    def handle_set_locations(self, request):
        self.add_locations_to_dict(request.locations)
        self.publish_event('locations')
        self.update_predicates()
        return SetLocationsResponse()

    def handle_clear_locations(self, request):
        # rospy.loginfo("Clearing locations")
        self.locations_dict = {}
        self.update_predicates()

        return EmptyResponse()

    def add_locations_to_dict(self, locations):
        for location in locations:

            self.locations_dict[location.name] = location

        response = AddCurrentLocationResponse()
        response.success = True

    # Objects
    def handle_get_objects(self, request):
        response = GetObjectsResponse()
        response.objects = self.create_object_array().objects
        return response

    def handle_set_objects(self, request):
        for object in request.objects:
            self.add_object_to_dict(object)
        self.publish_event('objects')
        self.update_predicates()
        return SetObjectsResponse()

    def handle_clear_objects(self, request):
        # rospy.loginfo("Clearing objects")
        self.objects_dict = {}
        self.update_predicates()

        return EmptyResponse()

    def handle_save_objects(self, request):
        # rospy.loginfo("Saving objects")
        with open(self.save_objects_filename, 'w') as outfile:
            yaml.dump(self.objects_dict, outfile, default_flow_style=False)

        return EmptyResponse()

    def handle_load_objects(self, request):
        # rospy.loginfo("Loading objects")
        try:
            with open(self.save_objects_filename, 'r') as infile:
                try:
                    self.objects_dict = yaml.load(infile)
                except yaml.YAMLError as exc:
                    rospy.logerr('Failed to load state!')
        except:
            rospy.logwarn("No save file found!")

        return EmptyResponse()

    def add_object_to_dict(self, object):
        self.objects_dict[object.name] = object

    def handle_get_unity_objects(self, request):
        rospy.loginfo("Getting objects from Unity")
        rospy.wait_for_service('/unity/get_objects')
        try:
            response = rospy.ServiceProxy('/unity/get_objects', GetObjects)()
            for object in response.objects:
                self.add_object_to_dict(object)
        except rospy.ServiceException, e:
            rospy.logwarn('Service call failed: %s', e)

        self.publish_event('objects')
        return EmptyResponse()

    # Robots
    def handle_clear_robots(self, request):
        # rospy.loginfo('Clearing robots')
        self.robot_dict = {}
        self.update_predicates()

        return EmptyResponse()

    def handle_set_robots(self, request):
        for robot in request.robots:
            self.robot_dict[robot.name] = robot
        self.publish_event('robots')
        self.update_predicates()
        return SetRobotsResponse()

    def handle_get_robots(self, request):
        robots = []
        for key, robot in self.robot_dict.items():
            robots.append(robot)

        response = GetRobotsResponse()
        response.robots = robots
        return response

    def handle_add_current_pose(self, request):
        location = Location(name=request.name, pose=self.current_pose.pose)
        add_locations_to_dict([location])
        return response

    def handle_clear_all(self, request):
        self.handle_clear_objects(EmptyRequest())
        self.handle_clear_locations(EmptyRequest())
        self.handle_clear_robots(EmptyRequest())
        return EmptyResponse()

    def handle_save_state(self, request):
        with open(self.save_state_filename, 'w') as outfile:
            yaml.dump(self.locations_dict, outfile, default_flow_style=False)

        return EmptyResponse()

    def handle_load_state(self, request):

        try:
            with open(self.save_state_filename, 'r') as infile:
                try:
                    self.locations_dict = yaml.load(infile)
                except yaml.YAMLError as exc:
                    rospy.logerr('Failed to load state!')
        except:
            rospy.logwarn("No save file found!")

        return EmptyResponse()

    # Predicates
    def handle_clear_objects_on_robots(self, request):
        self.objects_on_robots = []
        return EmptyResponse()

    def handle_add_object_on_robot(self, request):
        success = False

        for object_on_robot in self.objects_on_robots:
            if object_on_robot.object_name == request.object_on_robot.object_name and object_on_robot.robot_name == request.object_on_robot.robot_name:
                return AddObjectOnRobotResponse(success=success)

        if request.object_on_robot.object_name in self.objects_dict:
            if request.object_on_robot.robot_name in self.robot_dict:
                self.objects_on_robots.append(request.object_on_robot)
                success = True

        return AddObjectOnRobotResponse(success=success)

    def handle_remove_object_on_robot(self, request):

        for index, object_on_robot in enumerate(self.objects_on_robots):
            if object_on_robot.object_name == request.object_on_robot.object_name and object_on_robot.robot_name == request.object_on_robot.robot_name:
                self.objects_on_robots.pop(index)
                return RemoveObjectOnRobotResponse(success=True)

        return RemoveObjectOnRobotResponse(success=False)

    def handle_get_objects_on_robots(self, request):
        return GetObjectsOnRobotsResponse(objects_on_robots=self.objects_on_robots)

    def init_subscribers(self):
        rospy.Subscriber("/robot_pose", PoseStamped,
                         self.current_pose_callback)

    def init_publishers(self):
        self.location_pub = rospy.Publisher(
            '/world_state/locations', LocationArray, queue_size=1)

        self.object_pub = rospy.Publisher(
            '/world_state/objects', ObjectArray, queue_size=1)

        self.robot_pub = rospy.Publisher(
            '/world_state/robots', RobotArray, queue_size=1)

        self.marker_pub = rospy.Publisher(
            '/world_state/markers', MarkerArray, queue_size=1)

        self.event_pub = rospy.Publisher(
            '/world_state/event', WorldStateEvent, queue_size=10)

    def publish_event(self, type):
        event_msg = WorldStateEvent(type=type)
        self.event_pub.publish(event_msg)

    def current_pose_callback(self, pose_msg):
        # FIXME: Filter out small changes in pose
        self.last_pose = self.current_pose
        self.current_pose = pose_msg

        robot = Robot(name=self.master_name,
                      type=self.robot_base_type, pose=pose_msg.pose)
        self.robot_dict[self.master_name] = robot

        if not self.same_position(self.current_pose, self.last_pose):
            self.publish_event("robots")
            self.update_predicates()

    def update_predicates(self):
        self.update_robots_at_locations()
        self.update_objects_at_locations()

    def same_position(self, pose_1, pose_2):
        same_x = pose_1.pose.position.x == pose_2.pose.position.x
        same_y = pose_1.pose.position.y == pose_2.pose.position.y

        return same_x and same_y

    def update(self):
        pass

    def create_location_array(self):
        location_array_msg = LocationArray()
        for key in self.locations_dict:
            location_msg = Location()
            location_msg.name = key
            location_msg.pose = self.locations_dict[key].pose
            location_array_msg.locations.append(location_msg)
        return location_array_msg

    def create_object_array(self):
        object_array_msg = ObjectArray()
        for key, object in self.objects_dict.items():
            object_msg = Object()
            object_msg.name = key
            object_msg.type = object.type
            object_msg.pose = object.pose
            object_array_msg.objects.append(object_msg)
        return object_array_msg

    def create_robot_array(self):
        robot_array_msg = RobotArray()
        for key, robot in self.robot_dict.items():
            robot_array_msg.robots.append(robot)
        return robot_array_msg

    def publish(self):
        self.location_pub.publish(self.create_location_array())
        self.object_pub.publish(self.create_object_array())
        self.robot_pub.publish(self.create_robot_array())

if __name__ == '__main__':
    rospy.init_node('world_state')

    simple_world_state = LocalWorldState()

    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        simple_world_state.update()
        simple_world_state.publish()
        rate.sleep()
