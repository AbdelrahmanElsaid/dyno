#!/usr/bin/env python
import rospy
from std_srvs.srv import *
from geometry_msgs.msg import PoseWithCovarianceStamped, PoseStamped

from visualization_msgs.msg import Marker, MarkerArray

from collections import namedtuple

Location = namedtuple("Location", "pose_stamped, marker")

class SimpleWorldState:
    def __init__(self):
        rospy.loginfo("init")
        self.init_services()
        self.init_subscribers()
        self.init_publishers()

        self.current_pose = PoseStamped()

        # self.poses = []
        self.location_dict = {}

        self.unique_id_counter = 1000

    def init_services(self):
        self.add_current_pose_service = rospy.Service('/world_state/add_current_location', Empty, self.handle_add_current_pose)
        self.add_current_pose_service = rospy.Service('/world_state/clear_locations', Empty, self.handle_clear_poses)

    def handle_add_current_pose(self, req):
        rospy.loginfo("Adding current pose:")
        rospy.loginfo(self.current_pose)

        # self.poses.append(self.current_pose)
        # location.pose_stamped = self.current_pose
        marker = self.create_location_marker(self.current_pose)
        location = Location(pose_stamped=self.current_pose, marker=marker)
        self.location_dict[str(self.unique_id_counter)] = location

        # rospy.loginfo("Number of poses: %d", len(self.poses))
        rospy.loginfo("Number of poses: %d", len(self.location_dict))
        return EmptyResponse()

    def handle_clear_poses(self, req):
        rospy.loginfo("Clearing poses!")
        # self.poses = []
        self.location_dict = {}

        # rospy.loginfo("Number of poses: %d", len(self.poses))
        rospy.loginfo("Number of poses: %d", len(self.location_dict))
        return EmptyResponse()

    def init_subscribers(self):
        rospy.Subscriber("/robot_pose", PoseStamped, self.current_pose_callback)

    def init_publishers(self):
        self.marker_pub = rospy.Publisher('/world_state/markers', MarkerArray, queue_size=5)

    def current_pose_callback(self, pose_msg):
        self.current_pose = pose_msg

    def create_location_marker(self, location):
        marker_scale = .33
        marker_lifetime = 1 # 0 if forever
        marker_ns = 'location'
        marker_color = {'r': 0.4, 'g': 0.4, 'b': 0.7, 'a': 0.9}

        marker = Marker()

        marker.ns = marker_ns
        marker.type = Marker.SPHERE

        # Generate unique id
        marker.id = self.unique_id_counter
        self.unique_id_counter += 1

        marker.action = Marker.ADD
        marker.lifetime = rospy.Duration(marker_lifetime)

        marker.scale.x = marker_scale  # *1.2/3
        marker.scale.y = marker_scale  # *0.8/3
        marker.scale.z = marker_scale  # *(0.166/3 + 0.22)

        marker.color.r = marker_color['r']
        marker.color.g = marker_color['g']
        marker.color.b = marker_color['b']
        marker.color.a = marker_color['a']

        marker.header.frame_id = location.header.frame_id
        marker.header.stamp = rospy.Time.now()

        marker.pose = location.pose

        return marker

    def update(self):
        pass
        # rospy.loginfo("update")

    def publish(self):
        marker_array_msg = MarkerArray()
        # for location in self.poses:

        for key in self.location_dict:
            marker_array_msg.markers.append(self.location_dict[key].marker)

        self.marker_pub.publish(marker_array_msg)


if __name__ == '__main__':
    rospy.init_node('simple_world_state')

    simple_world_state = SimpleWorldState()

    rate = rospy.Rate(5)
    while not rospy.is_shutdown():
        simple_world_state.update()
        simple_world_state.publish()
        rate.sleep()
