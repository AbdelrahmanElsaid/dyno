#!/usr/bin/env python
#
# License: BSD
#   https://raw.githubusercontent.com/samiamlabs/dyno/master/LICENCE
#

import rospy

from std_srvs.srv import *

from dyno_msgs.srv import *
from dyno_msgs.msg import *

from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import PoseWithCovarianceStamped, PoseStamped, Quaternion, Pose, Point

from collections import namedtuple

from tf.transformations import quaternion_from_euler, euler_from_quaternion

import tf_conversions.posemath as pm
import numpy as np

import rospkg
import yaml

from copy import deepcopy

# LocationTuple = namedtuple("LocationTuple", "pose, marker, label")
# ObjectTuple = namedtuple("ObjectTuple", "pose, type, marker, label")


class WorldStateVisualizer:
    def __init__(self):
        pass

    def create_object_marker(self, object):
        marker_scale = .3
        marker_lifetime = 1  # 0 if forever
        marker_ns = 'objects'
        marker_color = {'r': 0.7, 'g': 0.4, 'b': 0.4, 'a': 0.9}

        marker = Marker()

        marker.ns = marker_ns
        marker.type = Marker.CUBE

        # Generate unique id
        marker.id = self.unique_id_counter
        self.unique_id_counter += 1

        marker.action = Marker.ADD
        marker.lifetime = rospy.Duration(marker_lifetime)

        marker.scale.x = marker_scale
        marker.scale.y = marker_scale
        marker.scale.z = marker_scale

        marker.color.r = marker_color['r']
        marker.color.g = marker_color['g']
        marker.color.b = marker_color['b']
        marker.color.a = marker_color['a']

        marker.header.frame_id = 'map'
        marker.header.stamp = rospy.Time.now()

        marker.pose = object.pose

        return marker

    def create_object_label(self, object, text):
        font_size = 0.24
        marker_lifetime = 1  # 0 if forever
        marker_ns = 'object_labels'
        marker_color = {'r': 0.2, 'g': 0.2, 'b': 0.5, 'a': 1.0}

        label_marker = Marker()

        label_marker.ns = marker_ns

        # Generate unique id
        label_marker.id = self.unique_id_counter
        self.unique_id_counter += 1

        label_marker.type = Marker.TEXT_VIEW_FACING
        label_marker.action = Marker.ADD
        label_marker.lifetime = rospy.Duration(marker_lifetime)

        label_marker.scale.z = font_size
        label_marker.text = text

        label_marker.color.r = marker_color['r']
        label_marker.color.g = marker_color['g']
        label_marker.color.b = marker_color['b']
        label_marker.color.a = marker_color['a']

        label_marker.header.frame_id = 'map'
        label_marker.header.stamp = rospy.Time.now()

        label_marker.pose = self.modify_object_label_pose(object.pose)

        return label_marker

    def modify_object_label_pose(self, pose):
        temp_pose = deepcopy(pose)

        q = temp_pose.orientation
        angles = euler_from_quaternion([q.x, q.y, q.z, q.w])
        alpha = angles[2]

        modified_x = temp_pose.position.x
        modified_y = temp_pose.position.y
        modified_z = temp_pose.position.z + 0.25

        q_angle = quaternion_from_euler(0, 0, alpha, axes='sxyz')
        q = Quaternion(*q_angle)

        temp_pose = Pose(Point(modified_x, modified_y, modified_z), q)

        return temp_pose

    def create_location_marker(self, location):
        marker_scale = .33
        marker_lifetime = 1  # 0 if forever
        marker_ns = 'locations'
        marker_color = {'r': 0.4, 'g': 0.4, 'b': 0.7, 'a': 0.9}

        marker = Marker()

        marker.ns = marker_ns
        marker.type = Marker.CYLINDER

        # Generate unique id
        marker.id = self.unique_id_counter
        self.unique_id_counter += 1

        marker.action = Marker.ADD
        marker.lifetime = rospy.Duration(marker_lifetime)

        marker.scale.x = marker_scale
        marker.scale.y = marker_scale
        marker.scale.z = 0.01

        marker.color.r = marker_color['r']
        marker.color.g = marker_color['g']
        marker.color.b = marker_color['b']
        marker.color.a = marker_color['a']

        marker.header.frame_id = 'map'
        marker.header.stamp = rospy.Time.now()

        marker.pose = deepcopy(location.pose)
        marker.pose.position.z = 0.0

        return marker

    def create_location_label(self, location):
        font_size = 0.24
        marker_lifetime = 1  # 0 if forever
        marker_ns = 'location_labels'
        marker_color = {'r': 0.5, 'g': 0.2, 'b': 0.2, 'a': 1.0}

        label_marker = Marker()

        label_marker.ns = marker_ns

        # Generate unique id
        label_marker.id = self.unique_id_counter
        self.unique_id_counter += 1

        label_marker.type = Marker.TEXT_VIEW_FACING
        label_marker.action = Marker.ADD
        label_marker.lifetime = rospy.Duration(marker_lifetime)

        label_marker.scale.z = font_size
        label_marker.text = location.name

        label_marker.color.r = marker_color['r']
        label_marker.color.g = marker_color['g']
        label_marker.color.b = marker_color['b']
        label_marker.color.a = marker_color['a']

        label_marker.header.frame_id = 'map'
        label_marker.header.stamp = rospy.Time.now()

        label_marker.pose = self.modify_location_label_pose(location.pose)

        return label_marker

    def modify_location_label_pose(self, pose):
        temp_pose = deepcopy(pose)

        q = temp_pose.orientation
        angles = euler_from_quaternion([q.x, q.y, q.z, q.w])
        alpha = angles[2]

        modified_x = temp_pose.position.x
        modified_y = temp_pose.position.y
        modified_z = 0.15

        q_angle = quaternion_from_euler(0, 0, alpha, axes='sxyz')
        q = Quaternion(*q_angle)

        temp_pose = Pose(Point(modified_x, modified_y, modified_z), q)

        return temp_pose

    def update(self):
        pass

    def create_location_array(self):
        location_array_msg = LocationArray()
        for key in self.location_dict:
            location_msg = Location()
            location_msg.name = key
            location_msg.pose = self.location_dict[key].pose
            location_array_msg.locations.append(location_msg)
        return location_array_msg

    def create_object_array(self):
        object_array_msg = ObjectArray()
        for key, object in self.object_dict.items():
            object_msg = Object()
            object_msg.name = key
            object_msg.type = object.type
            object_msg.pose = object.pose
            object_array_msg.objects.append(object_msg)
        return object_array_msg

    def create_robot_array(self):
        robot_array_msg = RobotArray()
        for key, robot in self.robot_dict.items():
            robot_array_msg.robots.append(robot)
        return robot_array_msg

    def publish(self):

        self.location_pub.publish(self.create_location_array())
        self.object_pub.publish(self.create_object_array())
        self.robot_pub.publish(self.create_robot_array())

        marker_array_msg = MarkerArray()
        for key in self.location_dict:
            marker_array_msg.markers.append(self.location_dict[key].marker)
            marker_array_msg.markers.append(self.location_dict[key].label)

        for key in self.object_dict:
            if key != self.moving_object_name:
                marker_array_msg.markers.append(self.object_dict[key].marker)
                marker_array_msg.markers.append(self.object_dict[key].label)
            else:
                moving_marker = deepcopy(self.object_dict[key].marker)
                moving_marker.pose = deepcopy(self.current_pose.pose)
                moving_marker.pose.position.z -= 0.3
                marker_array_msg.markers.append(moving_marker)

                moving_marker_label = deepcopy(self.object_dict[key].label)
                moving_marker_label.pose = deepcopy(self.current_pose.pose)
                moving_marker_label.pose.position.z += 0.3
                marker_array_msg.markers.append(moving_marker_label)

        self.marker_pub.publish(marker_array_msg)


if __name__ == '__main__':
    rospy.init_node('world_state_visualizer')

    world_state_visualizer = WorldStateVisualizer()

    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        world_state_visualizer.update()
        world_state_visualizer.publish()
        rate.sleep()
