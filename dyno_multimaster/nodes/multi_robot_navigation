#!/usr/bin/env python
#
# License: BSD
#   https://raw.githubusercontent.com/samiamlabs/dyno/master/LICENCE
#

import rospy
from dyno_multimaster.msg import RoconRobotPose
from visualization_msgs.msg import Marker, MarkerArray

from collections import namedtuple

RobotTuple = namedtuple("RobotTuple", "pose_stamped, marker")

standard_marker_colors_dict = {
    'blue': {'r': 0.4, 'g': 0.4, 'b': 0.7, 'a': 0.9},
    'green': {'r': 0.4, 'g': 0.7, 'b': 0.4, 'a': 0.9},
}

class MultiRobotNavigation:
    def __init__(self):
        rospy.init_node('multi_robot_navigation')

        self.robot_dict = {}
        self.unique_id_counter = 1000
        self.robot_marker_height = 0.2

        self.init_subscribers()
        self.init_publishers()

    def init_subscribers(self):
        rospy.Subscriber('/applications/robot_pose', RoconRobotPose, self.robot_pose_callback)

    def robot_pose_callback(self, robot_msg):

        if robot_msg.master_name in self.robot_dict:
            marker = self.update_robot_marker(robot_msg)
        else:
            marker = self.create_robot_marker(robot_msg)

        robot_tuple = RobotTuple(pose_stamped=robot_msg.pose_stamped, marker=marker)

        self.robot_dict[robot_msg.master_name] = robot_tuple

    def init_publishers(self):
        self.marker_pub = rospy.Publisher('/multi_robot_markers', MarkerArray, queue_size=1)

    def update(self):
        pass

    def publish(self):
        marker_array_msg = MarkerArray()

        for key in self.robot_dict:
            marker_array_msg.markers.append(self.robot_dict[key].marker)

        self.marker_pub.publish(marker_array_msg)

    def update_robot_marker(self, robot):
        marker = self.robot_dict[robot.master_name].marker

        marker.header.frame_id = robot.pose_stamped.header.frame_id
        marker.header.stamp = rospy.Time.now()

        marker.pose = robot.pose_stamped.pose
        marker.pose.position.z = self.robot_marker_height

        return marker

    def create_robot_marker(self, robot):
        marker_scale = .33
        marker_lifetime = 1  # 0 if forever
        marker_ns = 'robot'

        if robot.master_name in standard_marker_colors_dict:
            marker_color = standard_marker_colors_dict[robot.master_name]
        else:
            marker_color = {'r': 0.5, 'g': 0.5, 'b': 0.5, 'a': 0.9}

        marker = Marker()

        marker.ns = marker_ns
        marker.type = Marker.SPHERE

        # Generate unique id
        marker.id = self.unique_id_counter
        self.unique_id_counter += 1

        marker.action = Marker.ADD
        marker.lifetime = rospy.Duration(marker_lifetime)

        marker.scale.x = marker_scale
        marker.scale.y = marker_scale
        marker.scale.z = marker_scale

        marker.color.r = marker_color['r']
        marker.color.g = marker_color['g']
        marker.color.b = marker_color['b']
        marker.color.a = marker_color['a']

        marker.header.frame_id = robot.pose_stamped.header.frame_id
        marker.header.stamp = rospy.Time.now()

        marker.pose = robot.pose_stamped.pose
        marker.pose.position.z = self.robot_marker_height

        return marker


if __name__ == '__main__':
    multi_robot_navigation = MultiRobotNavigation()

    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        multi_robot_navigation.update()
        multi_robot_navigation.publish()
        rate.sleep()
