#!/usr/bin/env python
#
# License: BSD
#   https://raw.githubusercontent.com/samiamlabs/dyno/master/LICENCE
#

import rospy
import dyno_msgs.msg as dyno_msgs
import rosplan_dispatch_msgs.msg as rosplan_dispatch_msgs

import std_msgs.msg

from rosplan_knowledge_msgs.srv import *
from rosplan_knowledge_msgs.msg import *

from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from geometry_msgs.msg import PoseStamped

from dyno_msgs.srv import GetLocations, GetLocationsRequest, GetLocationsResponse

from rocon_app_manager_msgs.srv import *


class DeliverParcelAction:
    def __init__(self):
        rospy.init_node('rp_waypoint_navigation_action')

        self.knowledge_base = 'rosplan_knowledge_base'
        self.pddl_action_name = 'move_parcel'
        self.action_dispatch_topic = '/rosplan_plan_dispatcher/action_dispatch'
        self.action_feedback_topic = '/rosplan_plan_dispatcher/action_feedback'

        self.init_publishers()
        self.init_subscribers()

    def init_publishers(self):
        self.action_feedback_pub = rospy.Publisher(self.action_feedback_topic,
                                       rosplan_dispatch_msgs.ActionFeedback, queue_size=10)

        self.add_delivery_pub = rospy.Publisher('/drone_parcel_delivery/add_delivery',
                                       dyno_msgs.Delivery, queue_size=1)

        self.start_delivery_pub = rospy.Publisher('/drone_parcel_delivery/start',
                                       std_msgs.msg.Empty, queue_size=1)

    def init_subscribers(self):
        rospy.Subscriber(self.action_dispatch_topic,
                         rosplan_dispatch_msgs.ActionDispatch,
                         self.action_dispatch_callback)

    def action_dispatch_callback(self, action_dispatch_msg):
        action_feedback_msg = rosplan_dispatch_msgs.ActionFeedback()
        action_feedback_msg.action_id = action_dispatch_msg.action_id

        rospy.loginfo('Executing rosplan action: %s', action_dispatch_msg.name)

        operator_details = self.try_get_domain_operator_details(action_dispatch_msg.name)

        # TODO: handle start effects

        if action_dispatch_msg.name != self.pddl_action_name:
            return

        already_running_message = 'an app is already running [dyno_quadrotor_rapps/parcel_delivery]'
        response = self.try_start_rapp('dyno_quadrotor_rapps/parcel_delivery')
        if not response.started and not response.message == already_running_message:
            self.try_stop_rapp()
            response = self.try_start_rapp('dyno_quadrotor_rapps/parcel_delivery')

        if response.started:
            # Wait for rapp tree to start
            rospy.wait_for_message('/drone_parcel_delivery/report', std_msgs.msg.String)

        parameter_dict = dict((p.key, p.value) for p in action_dispatch_msg.parameters)

        locations = self.try_get_locations().locations
        location_dict = dict((l.name, l.pose) for l in locations)

        if 'to' in parameter_dict and parameter_dict['to'] in location_dict:
            delivery_msg = dyno_msgs.Delivery(object_name=parameter_dict['p'], location_name=parameter_dict['to'])
            self.add_delivery_pub.publish(delivery_msg)
            self.start_delivery_pub.publish(std_msgs.msg.Empty())
            action_feedback_msg.status = "action enabled"
            self.action_feedback_pub.publish(action_feedback_msg)
        else:
            rospy.logwarn("To waypoint pose not found")
            # Publish action failed
            action_feedback_msg.status = "action failed"
            self.action_feedback_pub.publish(action_feedback_msg)
            return

        goal_reached = False

        # TODO: add timeout?
        while not goal_reached:
            rospy.sleep(0.1)
            query_response = self.try_query_state('parcel_at', parameter_dict['p'], parameter_dict['to'])
            goal_reached = query_response.results[0]

        # Handle at end add effects
        for predicate in operator_details.at_end_add_effects:
            if predicate.name == 'robot_at' or 'parcel_at':
                continue  # Handled by dyno world state interface

            for parameter in predicate.typed_parameters:
                parameter.value = parameter_dict[parameter.key]

            self.try_update_knowledge(predicate.name, predicate.typed_parameters)

        # TODO: Handle at end remove effects

        action_feedback_msg.status = "action achieved"
        self.action_feedback_pub.publish(action_feedback_msg)

    def try_get_locations(self):
        service_name = '/world_state/get_locations'
        rospy.wait_for_service(service_name)
        update_knowledge = rospy.ServiceProxy(service_name, GetLocations)
        request = GetLocationsRequest()
        response = GetLocationsResponse()
        try:
            response = update_knowledge(request)
        except rospy.ServiceException, e:
            rospy.logwarn('Service call failed: %s', e)

        return response

    def try_query_state(self, attribute_name, robot_name, location_name):
        service_name = '/' + self.knowledge_base + '/query_state'
        rospy.wait_for_service(service_name)
        query_state = rospy.ServiceProxy(service_name, KnowledgeQueryService)
        request = KnowledgeItem()
        request.knowledge_type = KnowledgeItem.FACT
        request.attribute_name = attribute_name
        request.values.append( diagnostic_msgs.msg.KeyValue(key='v',value=robot_name))
        request.values.append( diagnostic_msgs.msg.KeyValue(key='wp',value=location_name))

        response = KnowledgeQueryServiceResponse()
        try:
            response = query_state([request])
        except rospy.ServiceException, e:
            rospy.logwarn('Service call failed: %s', e)

        return response

    def try_get_domain_operator_details(self, name):
        service_name = '/' + self.knowledge_base + '/domain/operator_details'
        rospy.wait_for_service(service_name)
        get_domain_operator_details = rospy.ServiceProxy(service_name, GetDomainOperatorDetailsService)
        request = GetDomainOperatorDetailsServiceRequest()
        request.name = name
        response = GetDomainOperatorDetailsServiceResponse()
        try:
            response = get_domain_operator_details(request)
        except rospy.ServiceException, e:
            rospy.logwarn('Service call failed: %s', e)

        return response.op

    def try_update_knowledge(self, attribute_name, key_values):
        service_name = '/' + self.knowledge_base + '/update'

        request = KnowledgeUpdateServiceRequest()
        request.update_type = KnowledgeUpdateServiceRequest.ADD_KNOWLEDGE
        request.knowledge.knowledge_type = KnowledgeItem.FACT
        request.knowledge.attribute_name = attribute_name
        request.knowledge.values = key_values

        rospy.wait_for_service(service_name)
        try:
            response = rospy.ServiceProxy(service_name, KnowledgeUpdateService)(request)
        except rospy.ServiceException, e:
            rospy.logwarn('Service call failed: %s', e)

    def try_start_rapp(self, rapp_name):
        service_name = '/rocon/app_manager/start_rapp'
        request = StartRappRequest(name=rapp_name)
        response = StartRappResponse()
        rospy.wait_for_service(service_name)
        try:
            response = rospy.ServiceProxy(service_name, StartRapp)(request)
        except rospy.ServiceException, e:
            rospy.logwarn('Service call failed: %s', e)

        return response

    def try_stop_rapp(self):
        service_name = '/rocon/app_manager/stop_rapp'
        request = StopRappRequest()
        response = StopRappResponse()
        rospy.wait_for_service(service_name)
        try:
            response = rospy.ServiceProxy(service_name, StopRapp)(request)
        except rospy.ServiceException, e:
            rospy.logwarn('Service call failed: %s', e)

        return response


if __name__ == '__main__':
    try:
        deliverParcelAction = DeliverParcelAction()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
